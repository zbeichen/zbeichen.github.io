<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JDK8新特性</title>
    <url>/2024/04/20/java/JDK8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/LXYDSF/article/details/125919046">JDK8新特性详解_爱编程的大李子的博客-CSDN博客_jdk8新特性有哪些</a></p>
<h2 id="一、Lambada表达式"><a href="#一、Lambada表达式" class="headerlink" title="一、Lambada表达式"></a>一、Lambada表达式</h2><h3 id="1、基础知识"><a href="#1、基础知识" class="headerlink" title="1、基础知识"></a>1、基础知识</h3><p><strong>函数式接口：</strong>只有一个抽象方法的接口称为函数式接口,可以通过注解**@FunctionalInterface**控制</p>
<p><strong>Lambada表达式只能对函数式接口进行实现</strong></p>
<h3 id="2、实现方式"><a href="#2、实现方式" class="headerlink" title="2、实现方式"></a>2、实现方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> result;</span><br><span class="line">        <span class="comment">// 1、Lambda表达式</span></span><br><span class="line">        <span class="type">Compers</span> <span class="variable">compers</span> <span class="operator">=</span> (i, j) -&gt; i + j;</span><br><span class="line">        result = compers.fun(a, b);</span><br><span class="line">        <span class="comment">// 2、接口实现</span></span><br><span class="line">        <span class="type">Compers</span> <span class="variable">compers1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompersImpl</span>();</span><br><span class="line">        result = compers1.fun(a, b);</span><br><span class="line">        <span class="comment">// 3、匿名类</span></span><br><span class="line">        result = <span class="keyword">new</span> <span class="title class_">Compers</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> i + j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.fun(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Compers</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompersImpl</span> <span class="keyword">implements</span> <span class="title class_">Compers</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、语法"><a href="#3、语法" class="headerlink" title="3、语法"></a>3、语法</h3><h4 id="3-1基础语法"><a href="#3-1基础语法" class="headerlink" title="3.1基础语法"></a>3.1基础语法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        ():描述参数列表；</span></span><br><span class="line"><span class="comment">        &#123;&#125;:描述方法体</span></span><br><span class="line"><span class="comment">        -&gt; :Lambda运算符 读作 goes to</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="comment">//1、无参无返回</span></span><br><span class="line">        <span class="type">Compar1</span> <span class="variable">compar1</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        compar1.fun();</span><br><span class="line">        <span class="comment">//2、无返回值单个参数</span></span><br><span class="line">        <span class="type">Compar2</span> <span class="variable">compar2</span> <span class="operator">=</span> (<span class="type">int</span> a) -&gt; &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;;</span><br><span class="line">        compar2.fun(<span class="number">9</span>);</span><br><span class="line">        <span class="comment">//3、无返回值多个参数</span></span><br><span class="line">        <span class="type">Compar3</span> <span class="variable">compar3</span> <span class="operator">=</span> (<span class="type">int</span> a,<span class="type">int</span> b) -&gt; &#123;</span><br><span class="line">            System.out.println(a-b);</span><br><span class="line">        &#125;;</span><br><span class="line">        compar3.fun(<span class="number">9</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//4、有返回值无参</span></span><br><span class="line">        <span class="type">Compar4</span> <span class="variable">compar4</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你好！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(compar4.fun());</span><br><span class="line">        <span class="comment">//5、有返回值单个参数</span></span><br><span class="line">        <span class="type">Compar5</span> <span class="variable">compar5</span> <span class="operator">=</span> (<span class="type">int</span> a) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你好！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> a+<span class="number">1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(compar5.fun(<span class="number">7</span>));</span><br><span class="line">        <span class="comment">//6、有返回值多个参数</span></span><br><span class="line">        <span class="type">Compar6</span> <span class="variable">compar6</span> <span class="operator">=</span> (<span class="type">int</span> a,<span class="type">int</span> b) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你好！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> a+b;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(compar6.fun(<span class="number">3</span>,<span class="number">9</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Compar1</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Compar2</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Compar3</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Compar4</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">fun</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Compar5</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Compar6</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2精简语法"><a href="#3-2精简语法" class="headerlink" title="3.2精简语法"></a>3.2精简语法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1、参数类型省略</span></span><br><span class="line">    <span class="type">Compar2</span> <span class="variable">compar2</span> <span class="operator">=</span> (a) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//2、参数小括号 如果参数有且只有一个，可省略</span></span><br><span class="line">    <span class="type">Compar2</span> <span class="variable">compar21</span> <span class="operator">=</span> a -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//3、方法大括号 方法体中只有一条语句</span></span><br><span class="line">    <span class="type">Compar2</span> <span class="variable">compar22</span> <span class="operator">=</span> (a) -&gt; System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    <span class="comment">//4、return 方法体中只有一条语句且为reutrn</span></span><br><span class="line">    <span class="type">Compar4</span> <span class="variable">compar41</span> <span class="operator">=</span> () -&gt; <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3语法进阶"><a href="#3-3语法进阶" class="headerlink" title="3.3语法进阶"></a>3.3语法进阶</h4><p>单独用方法对接口中的方法进行实现</p>
<ul>
<li>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</li>
<li>方法引用可以看做是Lambda表达式深层次的表达。换句话说，方法引用就是Lambda表达式</li>
<li>也就是函数式接口的一个实例，通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖。</li>
<li>要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致！</li>
<li>格式：使用操作符“::” 将类(或对象) 与方法名分隔开来。</li>
<li>如下三种主要使用情况：</li>
<li><strong>对象::实例方法名</strong></li>
<li><strong>类::静态方法名</strong></li>
<li><strong>类::实例方法名</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Compar6</span> <span class="variable">compar61</span> <span class="operator">=</span> (a,b) -&gt; LambdaTest.change1(a,b);  <span class="comment">// 针对static方法</span></span><br><span class="line">        <span class="type">Compar6</span> <span class="variable">compar62</span> <span class="operator">=</span> LambdaTest::change1; <span class="comment">// 针对static方法</span></span><br><span class="line">        <span class="type">Compar6</span> <span class="variable">compar63</span> <span class="operator">=</span> (a,b) -&gt; <span class="keyword">new</span> <span class="title class_">LambdaTest</span>().change2(a,b); <span class="comment">// 两种皆可</span></span><br><span class="line">        <span class="type">Compar6</span> <span class="variable">compar64</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LambdaTest</span>()::change2; <span class="comment">// 针对非static方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">change1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">change2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Compar6</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造方法的引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Compar61</span> <span class="variable">compar61</span> <span class="operator">=</span> () -&gt; <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        compar61.fun();</span><br><span class="line">        <span class="type">Compar62</span> <span class="variable">compar62</span> <span class="operator">=</span> (String name) -&gt; <span class="keyword">new</span> <span class="title class_">Person</span>(name);</span><br><span class="line">        compar62.fun(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        <span class="type">Compar61</span> <span class="variable">compar63</span> <span class="operator">=</span> Person::<span class="keyword">new</span>;</span><br><span class="line">        compar63.fun();</span><br><span class="line">        <span class="type">Compar62</span> <span class="variable">compar64</span> <span class="operator">=</span> Person::<span class="keyword">new</span>;</span><br><span class="line">        compar64.fun(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Compar61</span>&#123;</span><br><span class="line">    Person <span class="title function_">fun</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Compar62</span>&#123;</span><br><span class="line">    Person <span class="title function_">fun</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、内置函数式接口"><a href="#4、内置函数式接口" class="headerlink" title="4、内置函数式接口"></a>4、内置函数式接口</h3><h4 id="4-1Supplier"><a href="#4-1Supplier" class="headerlink" title="4.1Supplier"></a>4.1Supplier</h4><p><strong>无参有返回值</strong>的接口,对Lambda表达式需要提供一个返回数据的类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        fun1(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>,b = <span class="number">12</span>;</span><br><span class="line">            <span class="keyword">return</span> a+b;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun1</span><span class="params">(Supplier&lt;Integer&gt; supplier)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> supplier.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;value=&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Supplier</span> <span class="variable">s</span> <span class="operator">=</span> ()-&gt;&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;hah&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;你好&quot;</span>;</span><br><span class="line">       &#125;;</span><br><span class="line">     System.out.println(s.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2Consumer"><a href="#4-2Consumer" class="headerlink" title="4.2Consumer"></a>4.2Consumer</h4><p><strong>有参无返回值</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        fun1(msg-&gt;&#123;</span><br><span class="line">            System.out.println(msg.toUpperCase());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun1</span><span class="params">(Consumer&lt;String&gt; consumer)</span>&#123;</span><br><span class="line">        consumer.accept(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        fun1(ms1-&gt;&#123;</span><br><span class="line">            System.out.println(ms1.toUpperCase());</span><br><span class="line">        &#125;,ms2-&gt;&#123;</span><br><span class="line">            System.out.println(ms2.toLowerCase());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun1</span><span class="params">(Consumer&lt;String&gt; c1,Consumer&lt;String&gt; c2)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        c1.accept(str);</span><br><span class="line">        c2.accept(str);</span><br><span class="line">        <span class="comment">//上两句等同于c1.andThen(c2).accept(str);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Consumer</span> <span class="variable">c</span> <span class="operator">=</span> (a)-&gt; &#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;;</span><br><span class="line">    c.accept(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3Function"><a href="#4-3Function" class="headerlink" title="4.3Function"></a>4.3Function</h4><p><strong>有参有返回值</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        fun1(msg-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.valueOf(msg);</span><br><span class="line">        &#125;,<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun1</span><span class="params">(Function&lt;String,Integer&gt; function,String msg)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">apply</span> <span class="operator">=</span> function.apply(msg);</span><br><span class="line">        System.out.println(apply);</span><br><span class="line">        <span class="comment">//也可以andThen，还有个compose,但执行顺序和andThen相反</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun3</span><span class="params">()</span>&#123;</span><br><span class="line">    Function&lt;Integer[], Integer&gt; function = (a) -&gt; &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer s:a</span><br><span class="line">             ) &#123;</span><br><span class="line">            sum+=s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(function.apply(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-4Predicate"><a href="#4-4Predicate" class="headerlink" title="4.4Predicate"></a>4.4Predicate</h4><p><strong>有参有返回值</strong>，并且返回值是boolean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        fun1(msg-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> msg.length()&gt;<span class="number">3</span>;</span><br><span class="line">        &#125;,<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun1</span><span class="params">(Predicate&lt;String&gt; predicate, String msg)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> predicate.test(msg);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、Stream流"><a href="#二、Stream流" class="headerlink" title="二、Stream流"></a>二、Stream流</h2><h3 id="1、Stream流获取方式"><a href="#1、Stream流获取方式" class="headerlink" title="1、Stream流获取方式"></a>1、Stream流获取方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 从集合中获取</span></span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从数组中获取</span></span><br><span class="line">    Integer [] a = <span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">10</span>];</span><br><span class="line">    Stream&lt;Integer&gt; stream1 = Arrays.stream(a);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过stream中的静态方法（注意：虽然可以传递数组，但在基本数据类型数组使用时不会自动装箱，会把数据整体放入流，而不是数组的每个值）</span></span><br><span class="line">    Stream&lt;Integer&gt; stream2 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、Stream流的使用"><a href="#2、Stream流的使用" class="headerlink" title="2、Stream流的使用"></a>2、Stream流的使用</h3><p><strong>操作类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String studentId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// distinct时，重写equals和hashCode，自定义通过studentId判断重复</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="keyword">return</span> studentId.equals(student.studentId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(studentId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 排序，内比较器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.getStudentId().compareTo(o.getStudentId()) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getAge().compareTo(o.getAge());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getStudentId().compareTo(o.getStudentId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; <span class="title function_">getStudentList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;() &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;101&quot;</span>, <span class="string">&quot;张无忌&quot;</span>, <span class="number">23</span>, format.parse(<span class="string">&quot;2000-12-22&quot;</span>), <span class="string">&quot;五一路&quot;</span>));</span><br><span class="line">                    add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;102&quot;</span>, <span class="string">&quot;周芷若&quot;</span>, <span class="number">19</span>, format.parse(<span class="string">&quot;2004-12-22&quot;</span>), <span class="string">&quot;朝阳路&quot;</span>));</span><br><span class="line">                    add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;103&quot;</span>, <span class="string">&quot;赵敏&quot;</span>, <span class="number">25</span>, format.parse(<span class="string">&quot;1998-12-22&quot;</span>), <span class="string">&quot;阳光大道&quot;</span>));</span><br><span class="line">                    add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;104&quot;</span>, <span class="string">&quot;张强&quot;</span>, <span class="number">23</span>, format.parse(<span class="string">&quot;2000-12-22&quot;</span>), <span class="string">&quot;复兴路&quot;</span>));</span><br><span class="line">                    add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;101&quot;</span>, <span class="string">&quot;张三丰&quot;</span>, <span class="number">21</span>, format.parse(<span class="string">&quot;2002-12-22&quot;</span>), <span class="string">&quot;黄花路&quot;</span>));</span><br><span class="line">                    add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;101&quot;</span>, <span class="string">&quot;张三丰&quot;</span>, <span class="number">21</span>, format.parse(<span class="string">&quot;2002-12-22&quot;</span>), <span class="string">&quot;黄花路&quot;</span>));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-1常用中间方法"><a href="#2-1常用中间方法" class="headerlink" title="2.1常用中间方法"></a>2.1常用中间方法</h4><p><img src="https://fastly.jsdelivr.net/gh/zbeichen/PicGo/image-20240420021506627.png" alt="image-20240420021506627"></p>
<h5 id="2-1-1-filter"><a href="#2-1-1-filter" class="headerlink" title="2.1.1 filter"></a>2.1.1 filter</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">filter</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        studentList.stream()</span><br><span class="line">                .filter(item -&gt; item.getName().startsWith(<span class="string">&quot;张&quot;</span>))</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-2-limit"><a href="#2-1-2-limit" class="headerlink" title="2.1.2 limit"></a>2.1.2 limit</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取前n个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">limit</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        studentList.stream()</span><br><span class="line">                .limit(<span class="number">3</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-3-skip"><a href="#2-1-3-skip" class="headerlink" title="2.1.3 skip"></a>2.1.3 skip</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳过前n个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">skip</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        studentList.stream()</span><br><span class="line">                .skip(<span class="number">3</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-4-distinct"><a href="#2-1-4-distinct" class="headerlink" title="2.1.4 distinct"></a>2.1.4 distinct</h5><p><span style="color:red">注意：针对对象去重，根据需要重写equals和hashCode</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 去重</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">distinct</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        studentList.stream()</span><br><span class="line">                .distinct()</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-5-concat"><a href="#2-1-5-concat" class="headerlink" title="2.1.5 concat"></a>2.1.5 concat</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">concat</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList1 = getStudentList();</span><br><span class="line">        List&lt;Student&gt; studentList2 = getStudentList();</span><br><span class="line">        Stream.concat(studentList1.stream(), studentList2.stream())</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-6-map"><a href="#2-1-6-map" class="headerlink" title="2.1.6 map"></a>2.1.6 map</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        studentList.stream().map(item -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.getName().equals(<span class="string">&quot;张三丰&quot;</span>)) &#123;</span><br><span class="line">                item.setName(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-2-其它中间方法"><a href="#2-2-其它中间方法" class="headerlink" title="2.2 其它中间方法"></a>2.2 其它中间方法</h4><h5 id="2-2-1-peek"><a href="#2-2-1-peek" class="headerlink" title="2.2.1 peek"></a>2.2.1 peek</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 相比于map：无返回值处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        studentList.stream().peek(System.out::println).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-2-mapToInt"><a href="#2-2-2-mapToInt" class="headerlink" title="2.2.2 mapToInt"></a>2.2.2 mapToInt</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回三种指定类型的stream，其它作用和map类似</span></span><br><span class="line"><span class="comment">     * mapToDouble、mapToInt、mapToLong</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mapToDouble</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        studentList.stream().mapToInt(item -&gt; item.getName().length()).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-3常用终结方法"><a href="#2-3常用终结方法" class="headerlink" title="2.3常用终结方法"></a>2.3常用终结方法</h4><p><img src="https://fastly.jsdelivr.net/gh/zbeichen/PicGo/image-20240420021650807.png" alt="image-20240420021650807"></p>
<h5 id="2-3-1-forEach"><a href="#2-3-1-forEach" class="headerlink" title="2.3.1 forEach"></a>2.3.1 forEach</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        <span class="comment">// forEach在并行流（parallel stream）中顺序随机，而forEachOrdered会保证顺序</span></span><br><span class="line">        studentList.stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-2-count"><a href="#2-3-2-count" class="headerlink" title="2.3.2 count"></a>2.3.2 count</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">count</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> studentList.stream().count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-3-toArray"><a href="#2-3-3-toArray" class="headerlink" title="2.3.3 toArray"></a>2.3.3 toArray</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toArray</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        <span class="comment">// 默认类型</span></span><br><span class="line">        Object[] objects = studentList.stream().toArray();</span><br><span class="line">        System.out.println(Arrays.toString(objects));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定类型</span></span><br><span class="line">        Student[] students = studentList.stream().toArray(item -&gt; <span class="keyword">new</span> <span class="title class_">Student</span>[item]);</span><br><span class="line">        <span class="comment">// Student[] students = studentList.stream().toArray(Student[]::new);</span></span><br><span class="line">        System.out.println(Arrays.toString(students));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-4-collect"><a href="#2-3-4-collect" class="headerlink" title="2.3.4 collect"></a>2.3.4 collect</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">collect</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        <span class="comment">// 转List集合</span></span><br><span class="line">        List&lt;Student&gt; collect1 = studentList.stream().collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">for</span> (Student stu : collect1) &#123;</span><br><span class="line">            System.out.println(stu);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----- 分割线 -----&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转为Set集合（会自动去重）</span></span><br><span class="line">        Set&lt;Student&gt; collect2 = studentList.stream().collect(Collectors.toSet());</span><br><span class="line">        <span class="keyword">for</span> (Student stu : collect2) &#123;</span><br><span class="line">            System.out.println(stu);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----- 分割线 -----&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转为Map集合（需要注意key存在重复的情况）</span></span><br><span class="line">        Map&lt;String, Student&gt; collect3 = studentList.stream()</span><br><span class="line">                .collect(Collectors.toMap(Student::getStudentId, item -&gt; item, (k1, k2) -&gt; k2));</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Student&gt;&gt; iterator = collect3.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next().getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-5-max、min"><a href="#2-3-5-max、min" class="headerlink" title="2.3.5 max、min"></a>2.3.5 max、min</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大最小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">maxAndmin</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        Optional&lt;Student&gt; max = studentList.stream().max(Comparator.comparing(Student::getBirth));</span><br><span class="line">        System.out.println(max.get());</span><br><span class="line"></span><br><span class="line">        Optional&lt;Student&gt; min = studentList.stream().min(Comparator.comparing(Student::getBirth));</span><br><span class="line">        System.out.println(min.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-4其他终结方法"><a href="#2-4其他终结方法" class="headerlink" title="2.4其他终结方法"></a>2.4其他终结方法</h4><h5 id="2-4-1-allMatch"><a href="#2-4-1-allMatch" class="headerlink" title="2.4.1 allMatch"></a>2.4.1 allMatch</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否全部满足</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">allMatch</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> studentList.stream().allMatch(item -&gt; item.getStudentId().length() == <span class="number">3</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-2-noneMatch"><a href="#2-4-2-noneMatch" class="headerlink" title="2.4.2 noneMatch"></a>2.4.2 noneMatch</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否都不满足</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">noneMatch</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> studentList.stream().noneMatch(item -&gt; item.getStudentId().length() == <span class="number">3</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-3-anyMatch"><a href="#2-4-3-anyMatch" class="headerlink" title="2.4.3 anyMatch"></a>2.4.3 anyMatch</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否任意一个满足</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">anyMatch</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> studentList.stream().anyMatch(item -&gt; item.getName().length() == <span class="number">3</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-4-findAny"><a href="#2-4-4-findAny" class="headerlink" title="2.4.4 findAny"></a>2.4.4 findAny</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机抽取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findAny</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 实际上findAny是按顺序取，一般配合并行方法parallel()使用实现随机</span></span><br><span class="line">            Optional&lt;Student&gt; any = studentList.stream().parallel().findAny();</span><br><span class="line">            System.out.println(any.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-5-findFirst"><a href="#2-4-5-findFirst" class="headerlink" title="2.4.5 findFirst"></a>2.4.5 findFirst</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取第一个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        Optional&lt;Student&gt; any = studentList.stream().findFirst();</span><br><span class="line">        System.out.println(any.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-6-reduce"><a href="#2-4-6-reduce" class="headerlink" title="2.4.6 reduce"></a>2.4.6 reduce</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 累加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">        List&lt;String&gt; letters = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 带初始值的累加</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> numbers</span><br><span class="line">                .stream()</span><br><span class="line">                .reduce(<span class="number">1</span>, Integer::sum);</span><br><span class="line">        System.out.println(result1); <span class="comment">// 22</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">result2</span> <span class="operator">=</span> letters.stream().reduce(<span class="string">&quot;a&quot;</span>, String::concat);</span><br><span class="line">        System.out.println(result2); <span class="comment">// aabcde</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不带初始值的累加，此种方式返回的是Optional对象，需要get才能获取</span></span><br><span class="line">        Optional&lt;Integer&gt; result3 = numbers</span><br><span class="line">                .stream()</span><br><span class="line">                .reduce(Integer::sum);</span><br><span class="line">        System.out.println(result3.get()); <span class="comment">// 21</span></span><br><span class="line">        </span><br><span class="line">        Optional&lt;String&gt; result4 = letters.stream().reduce(String::concat);</span><br><span class="line">        System.out.println(result4.get()); <span class="comment">// abcde</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-7-flatMap"><a href="#2-4-7-flatMap" class="headerlink" title="2.4.7 flatMap"></a>2.4.7 flatMap</h5><p>作用：将一个集合流对象中的对象转换成流然后进行处理；</p>
<p><strong>例子1：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Library</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Book&gt; book;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------&gt;测试map方法:&quot;</span>);</span><br><span class="line">        testMap1();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------&gt;测试map2方法:&quot;</span>);</span><br><span class="line">        testMap2();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------&gt;测试flatMap方法:&quot;</span>);</span><br><span class="line">        testFlatMap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testMap1</span><span class="params">()</span> &#123;</span><br><span class="line">        initInfo().stream()</span><br><span class="line">                .map(library -&gt; library.getBook())</span><br><span class="line">                .forEach(book -&gt; System.out.println(book));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testMap2</span><span class="params">()</span> &#123;</span><br><span class="line">        initInfo().stream()</span><br><span class="line">                .map(library -&gt; library.getBook()).flatMap(item -&gt; item.stream())</span><br><span class="line">                .forEach(book -&gt; System.out.println(book));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testFlatMap</span><span class="params">()</span> &#123;</span><br><span class="line">        initInfo().stream()</span><br><span class="line">                .flatMap(library -&gt; library.getBook().stream())</span><br><span class="line">                .forEach(book -&gt; System.out.println(book));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Library&gt; <span class="title function_">initInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Library</span> <span class="variable">library1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Library</span>(<span class="string">&quot;新华图书&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Library</span> <span class="variable">library2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Library</span>(<span class="string">&quot;大家图书&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Library</span> <span class="variable">library3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Library</span>(<span class="string">&quot;瀚海图书&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;西游记&quot;</span>, <span class="string">&quot;吴承恩&quot;</span>, <span class="number">49</span>);</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;水浒传&quot;</span>, <span class="string">&quot;施耐庵&quot;</span>, <span class="number">57</span>);</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;罗贯中&quot;</span>, <span class="number">52</span>);</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;朝花夕拾&quot;</span>, <span class="string">&quot;鲁迅&quot;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Book&gt; library1Book = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Book&gt; library2Book = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Book&gt; library3Book = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        library1Book.add(book1);</span><br><span class="line">        library1Book.add(book2);</span><br><span class="line"></span><br><span class="line">        library2Book.add(book2);</span><br><span class="line">        library2Book.add(book3);</span><br><span class="line"></span><br><span class="line">        library3Book.add(book3);</span><br><span class="line">        library3Book.add(book4);</span><br><span class="line"></span><br><span class="line">        library1.setBook(library1Book);</span><br><span class="line">        library2.setBook(library2Book);</span><br><span class="line">        library3.setBook(library3Book);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(library1, library2, library3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">----------&gt;测试map方法:</span><br><span class="line">[Book(name=西游记, author=吴承恩, price=<span class="number">49</span>), Book(name=水浒传, author=施耐庵, price=<span class="number">57</span>)]</span><br><span class="line">[Book(name=水浒传, author=施耐庵, price=<span class="number">57</span>), Book(name=三国演义, author=罗贯中, price=<span class="number">52</span>)]</span><br><span class="line">[Book(name=三国演义, author=罗贯中, price=<span class="number">52</span>), Book(name=朝花夕拾, author=鲁迅, price=<span class="number">30</span>)]</span><br><span class="line">----------&gt;测试map2方法:</span><br><span class="line">Book(name=西游记, author=吴承恩, price=<span class="number">49</span>)</span><br><span class="line">Book(name=水浒传, author=施耐庵, price=<span class="number">57</span>)</span><br><span class="line">Book(name=水浒传, author=施耐庵, price=<span class="number">57</span>)</span><br><span class="line">Book(name=三国演义, author=罗贯中, price=<span class="number">52</span>)</span><br><span class="line">Book(name=三国演义, author=罗贯中, price=<span class="number">52</span>)</span><br><span class="line">Book(name=朝花夕拾, author=鲁迅, price=<span class="number">30</span>)</span><br><span class="line">----------&gt;测试flatMap方法:</span><br><span class="line">Book(name=西游记, author=吴承恩, price=<span class="number">49</span>)</span><br><span class="line">Book(name=水浒传, author=施耐庵, price=<span class="number">57</span>)</span><br><span class="line">Book(name=水浒传, author=施耐庵, price=<span class="number">57</span>)</span><br><span class="line">Book(name=三国演义, author=罗贯中, price=<span class="number">52</span>)</span><br><span class="line">Book(name=三国演义, author=罗贯中, price=<span class="number">52</span>)</span><br><span class="line">Book(name=朝花夕拾, author=鲁迅, price=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<p><strong>例子2：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flatMap</span><span class="params">()</span> &#123;</span><br><span class="line">    String[][] data = <span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;, &#123;<span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>&#125;, &#123;<span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>&#125;&#125;;</span><br><span class="line">    List&lt;String[]&gt; collect1 = Arrays.stream(data).collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">for</span> (String[] item : collect1) &#123;</span><br><span class="line">        System.out.println(Arrays.toString(item));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; collect2 = Arrays.stream(data).flatMap(Arrays::stream).collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">for</span> (String str: collect2) &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-5进阶使用"><a href="#2-5进阶使用" class="headerlink" title="2.5进阶使用"></a>2.5进阶使用</h4><h5 id="2-5-1-collect"><a href="#2-5-1-collect" class="headerlink" title="2.5.1 collect"></a>2.5.1 collect</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换成指定类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">collect</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        <span class="comment">// 转换指定集合</span></span><br><span class="line">        ArrayList&lt;Student&gt; collect1 = studentList.stream().collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br><span class="line">        <span class="comment">// 转换指定类型，参数1：创建指定返回类型，参数2：k1:返回类型对象，k2：遍历对象，参数3：累加操作</span></span><br><span class="line">        ArrayList&lt;String&gt; collect2 = studentList.stream()</span><br><span class="line">            .collect(() -&gt;<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), </span><br><span class="line">                     (k1, k2) -&gt; k1.add(k2.getAddress()), (one, two) -&gt; one.addAll(two));</span><br><span class="line">        <span class="comment">// 转换指定类型 简化</span></span><br><span class="line">        ArrayList&lt;String&gt; collect3 = studentList.stream()</span><br><span class="line">            .collect(ArrayList::<span class="keyword">new</span>, </span><br><span class="line">                     (k1, k2) -&gt; k1.add(k2.getAddress()), (one, two) -&gt; one.addAll(two));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-5-2-sorted"><a href="#2-5-2-sorted" class="headerlink" title="2.5.2 sorted"></a>2.5.2 sorted</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sorted</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line">        <span class="comment">// 1、内比较器 需要实现Comparable重写compareTo</span></span><br><span class="line">        studentList.stream().sorted().forEach(System.out::println);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2、外比较器</span></span><br><span class="line">        <span class="comment">// 入门版本</span></span><br><span class="line">        studentList.stream()</span><br><span class="line">            .sorted(((o1, o2) -&gt; o1.getStudentId()</span><br><span class="line">                     .compareTo(o2.getStudentId()))).forEach(System.out::println);</span><br><span class="line">        <span class="comment">// 进阶版，针对单个字段比较可简写</span></span><br><span class="line">        studentList.stream()</span><br><span class="line">            .sorted(Comparator.comparing(Student::getStudentId)).forEach(System.out::println);</span><br><span class="line">        <span class="comment">// 多字段比较</span></span><br><span class="line">        studentList.stream().sorted((o1, o2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (o2.getStudentId().compareTo(o1.getStudentId()) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getAge().compareTo(o2.getAge());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getStudentId().compareTo(o2.getStudentId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>&#x2F;&#x2F;</p>
<p><a href="https://blog.csdn.net/mianxiao15908/article/details/128673800?ops_request_misc=%7B%22request_id%22:%22170032654716800226588830%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170032654716800226588830&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-128673800-null-null.142%5Ev96%5Epc_search_result_base4&utm_term=stream%E4%B8%ADlist%E8%BD%ACmap&spm=1018.2226.3001.4187">List使用stream流转成map的几种方式_stream list转map-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/weixin_46146718/article/details/123791758?ops_request_misc=%7B%22request_id%22:%22170036732516777224422641%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170036732516777224422641&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-123791758-null-null.142%5Ev96%5Epc_search_result_base4&utm_term=stream%E6%B5%81%E7%9A%84collect&spm=1018.2226.3001.4187">Stream流中collect方法_stream().collect_李长渊哦的博客-CSDN博客</a></p>
<p>[parallel](<a href="https://blog.csdn.net/qq_25027457/article/details/122543033">7. Java8新特性-并行数据处理（parallel）_parallel()_elegent Developer的博客-CSDN博客</a>)</p>
<p>[noneamath](<a href="https://blog.csdn.net/libusi001/article/details/105718335/?ops_request_misc=&request_id=&biz_id=102&utm_term=stream%E7%9A%84noneMatch&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-105718335.142%5Ev96%5Epc_search_result_base4&spm=1018.2226.3001.4187">【Java】Java8 之Stream用法总结（持续更新）_java 8 stream-CSDN博客</a>)</p>
<p>[noneamath2](<a href="https://blog.csdn.net/yuxiangdeming/article/details/121288780?ops_request_misc=%7B%22request_id%22:%22170040086116800180658315%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170040086116800180658315&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-121288780-null-null.142%5Ev96%5Epc_search_result_base4&utm_term=stream%E7%9A%84noneMatch&spm=1018.2226.3001.4187">java8新特性Stream流中anyMatch和allMatch和noneMatch的区别详解_java8 anymatch_致最长的电影的博客-CSDN博客</a>)</p>
<pre><code class="java">public class stream &#123;
  
    /**
     * 排序 如何加入比较器，中文比较器 Locale.CHINA
     */
    @Test
    public void sorted() &#123;
        List &lt;String&gt;list1 = 
            new ArrayList(Arrays.asList(&quot;你tt&quot;,&quot;你好2&quot;,&quot;你好&quot;,&quot;hah&quot;,&quot;你好&quot;));
        List &lt;String&gt;list2 = list1.stream().sorted().collect(Collectors.toList());
        System.out.println(list2);
    &#125;

    /**
     *
     */
    @Test
    public void flatMap() &#123;
        //
    &#125;


    // 终止符号

    /**
     * 判断是否有满足条件的数据
     */
    @Test
    public void anyMatch() &#123;
        List &lt;String&gt;list1 = 
            new ArrayList(Arrays.asList(&quot;你tt&quot;,&quot;你好2&quot;,&quot;你好&quot;,&quot;hah&quot;,&quot;你好&quot;));
        boolean flag = list1.stream().anyMatch(o -&gt; o.contains(&quot;你好&quot;));
        System.out.println(flag);

    &#125;

    /**
     * 判断是否全部满足条件
     */
    @Test
    public void allaMatch() &#123;
        List &lt;String&gt;list1 = 
            new ArrayList(Arrays.asList(&quot;你tt&quot;,&quot;你好2&quot;,&quot;你好&quot;,&quot;你&quot;,&quot;你好&quot;));
        boolean flag = list1.stream().allMatch(o -&gt; o.contains(&quot;你&quot;));
        System.out.println(flag);

    &#125;

    /**
     * 判断是否全部 都不满足 条件
     */
    @Test
</code></pre>
]]></content>
      <categories>
        <category>java</category>
        <category>JDK8新特性</category>
      </categories>
      <tags>
        <tag>JDK8新特性</tag>
        <tag>Stream流</tag>
      </tags>
  </entry>
</search>
